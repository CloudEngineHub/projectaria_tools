"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6037],{3905:(e,a,t)=>{t.r(a),t.d(a,{MDXContext:()=>o,MDXProvider:()=>c,mdx:()=>h,useMDXComponents:()=>u,withMDXComponents:()=>d});var r=t(67294);function i(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function n(){return n=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var t=arguments[a];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},n.apply(this,arguments)}function s(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?s(Object(t),!0).forEach((function(a){i(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function m(e,a){if(null==e)return{};var t,r,i=function(e,a){if(null==e)return{};var t,r,i={},n=Object.keys(e);for(r=0;r<n.length;r++)t=n[r],a.indexOf(t)>=0||(i[t]=e[t]);return i}(e,a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)t=n[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var o=r.createContext({}),d=function(e){return function(a){var t=u(a.components);return r.createElement(e,n({},a,{components:t}))}},u=function(e){var a=r.useContext(o),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},c=function(e){var a=u(e.components);return r.createElement(o.Provider,{value:a},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},b=r.forwardRef((function(e,a){var t=e.components,i=e.mdxType,n=e.originalType,s=e.parentName,o=m(e,["components","mdxType","originalType","parentName"]),d=u(t),c=i,p=d["".concat(s,".").concat(c)]||d[c]||g[c]||n;return t?r.createElement(p,l(l({ref:a},o),{},{components:t})):r.createElement(p,l({ref:a},o))}));function h(e,a){var t=arguments,i=a&&a.mdxType;if("string"==typeof e||i){var n=t.length,s=new Array(n);s[0]=b;var l={};for(var m in a)hasOwnProperty.call(a,m)&&(l[m]=a[m]);l.originalType=e,l[p]="string"==typeof e?e:i,s[1]=l;for(var o=2;o<n;o++)s[o]=t[o];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}b.displayName="MDXCreateElement"},14281:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>m,toc:()=>d});var r=t(87462),i=(t(67294),t(3905)),n=t(79524);const s={sidebar_position:25,title:"Subscribe to Live Stream"},l="Subscribe to and Display Aria Streaming Data",m={unversionedId:"ARK/sdk/samples/streaming_subscribe",id:"ARK/sdk/samples/streaming_subscribe",title:"Subscribe to Live Stream",description:"Overview",source:"@site/docs/ARK/sdk/samples/streaming_subscribe.mdx",sourceDirName:"ARK/sdk/samples",slug:"/ARK/sdk/samples/streaming_subscribe",permalink:"/projectaria_tools/docs/ARK/sdk/samples/streaming_subscribe",draft:!1,editUrl:"https://github.com/facebookresearch/projectaria_tools/tree/main/website/docs/ARK/sdk/samples/streaming_subscribe.mdx",tags:[],version:"current",sidebarPosition:25,frontMatter:{sidebar_position:25,title:"Subscribe to Live Stream"},sidebar:"tutorialSidebar",previous:{title:"Stream & Display Live Sensor Data",permalink:"/projectaria_tools/docs/ARK/sdk/samples/device_stream"},next:{title:"Access Sensor Profiles",permalink:"/projectaria_tools/docs/ARK/sdk/concepts/sdk_sensor_profiles"}},o={},d=[{value:"Overview",id:"overview",level:2},{value:"Stream and subscribe examples",id:"stream-and-subscribe-examples",level:2},{value:"Example 1: Stream and subscribe over USB",id:"example-1-stream-and-subscribe-over-usb",level:3},{value:"Example 2: Using Wi-Fi",id:"example-2-using-wi-fi",level:3},{value:"Code walkthrough",id:"code-walkthrough",level:2},{value:"1. Instantiate Streaming Client",id:"1-instantiate-streaming-client",level:3},{value:"2. Configure the subscription",id:"2-configure-the-subscription",level:3},{value:"3. Set message queue size",id:"3-set-message-queue-size",level:3},{value:"4. Set streaming security options",id:"4-set-streaming-security-options",level:3},{value:"5. Create an StreamingClient observer and attach it",id:"5-create-an-streamingclient-observer-and-attach-it",level:3},{value:"6. Start subscribing and listen to the live stream",id:"6-start-subscribing-and-listen-to-the-live-stream",level:3},{value:"6. Visualize the live stream",id:"6-visualize-the-live-stream",level:3},{value:"7. Unsubscribe from the stream and free resources",id:"7-unsubscribe-from-the-stream-and-free-resources",level:3}],u={toc:d},c="wrapper";function p(e){let{components:a,...t}=e;return(0,i.mdx)(c,(0,r.Z)({},u,t,{components:a,mdxType:"MDXLayout"}),(0,i.mdx)("h1",{id:"subscribe-to-and-display-aria-streaming-data"},"Subscribe to and Display Aria Streaming Data"),(0,i.mdx)("h2",{id:"overview"},"Overview"),(0,i.mdx)("p",null,"This page shows how to use the code sample ",(0,i.mdx)("inlineCode",{parentName:"p"},"streaming_subscribe")," to subscribe to a Project Aria glasses datastream. It also provides a code walkthrough of ",(0,i.mdx)("inlineCode",{parentName:"p"},"streaming_subscribe"),"'s capabilities."),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"streaming_subscribe")," enables you to:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"Subscribe to a streaming session initiated by device_stream or the CLI and access sensor data through its observer"),(0,i.mdx)("li",{parentName:"ul"},"Visualize the live stream"),(0,i.mdx)("li",{parentName:"ul"},"Unsubscribe from a streaming session")),(0,i.mdx)("p",null,"If you're on MacOS and lose internet connection, run ",(0,i.mdx)("inlineCode",{parentName:"p"},"aria-doctor")," in a separate terminal."),(0,i.mdx)("h2",{id:"stream-and-subscribe-examples"},"Stream and subscribe examples"),(0,i.mdx)("h3",{id:"example-1-stream-and-subscribe-over-usb"},"Example 1: Stream and subscribe over USB"),(0,i.mdx)("p",null,"In this example you will:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"Start streaming using the CLI"),(0,i.mdx)("li",{parentName:"ul"},"Subscribe to the live stream using the SDK"),(0,i.mdx)("li",{parentName:"ul"},"Show a live preview of the sensor data from Aria's RGB and Mono Scene (SLAM) cameras")),(0,i.mdx)("ol",null,(0,i.mdx)("li",{parentName:"ol"},"Plug your Aria glasses into your computer, using the provided cable"),(0,i.mdx)("li",{parentName:"ol"},"In Terminal, go to the samples directory and run:")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-bash"},"aria streaming start --interface usb --use-ephemeral-certs\n")),(0,i.mdx)("ol",{start:3},(0,i.mdx)("li",{parentName:"ol"},"Wait for the stream to start then run:")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-bash"},"python -m streaming_subscribe\n")),(0,i.mdx)("p",null,"You should then see:"),(0,i.mdx)("div",{style:{textAlign:"center"}},(0,i.mdx)("img",{src:(0,n.default)("img/ARK/sdk/streaming_subscribe.png"),alt:"Aria Live Stream Window"})),(0,i.mdx)("ol",{start:4},(0,i.mdx)("li",{parentName:"ol"},"There are several ways you can stop streaming:")),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"Press q or ESC to quit the app"),(0,i.mdx)("li",{parentName:"ul"},"Use Ctrl-C to terminate in terminal"),(0,i.mdx)("li",{parentName:"ul"},"Press the Capture button on your glasses")),(0,i.mdx)("h3",{id:"example-2-using-wi-fi"},"Example 2: Using Wi-Fi"),(0,i.mdx)("p",null,"To use Wi-Fi to initiate streaming or to stream data, alter the ",(0,i.mdx)("inlineCode",{parentName:"p"},"aria streaming start --interface usb --use-ephemeral-certs")," command."),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"To stream data over Wi-Fi, use ",(0,i.mdx)("inlineCode",{parentName:"li"},"--interface wifi")),(0,i.mdx)("li",{parentName:"ul"},"To initiate streaming over Wi-Fi, add ",(0,i.mdx)("inlineCode",{parentName:"li"},"--device-ip <glasses IP>"),(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},"To get your glasses' IP address, open the Mobile Companion app and tap Wi-Fi")))),(0,i.mdx)("div",{style:{textAlign:"center"}},(0,i.mdx)("img",{width:"40%",src:(0,n.default)("img/ARK/sdk/aria_wi-fi.jpg"),alt:"Project Aria Mobile Companion App Dashboard, showing where the Wi-Fi setting is"}),(0,i.mdx)("img",{width:"40%",src:(0,n.default)("img/ARK/sdk/aria_wi-fi2.jpg"),alt:"Wi-Fi settings screen, showing IP address"})),(0,i.mdx)("h2",{id:"code-walkthrough"},"Code walkthrough"),(0,i.mdx)("p",null,"Ensure that Aria CLI is started using the ",(0,i.mdx)("inlineCode",{parentName:"p"},"--use-ephemeral-certs")," flag to use ephemeral certificates to stream data securely. Go to ",(0,i.mdx)("a",{parentName:"p",href:"/docs/ARK/sdk/concepts/streaming_internals"},"Streaming Internals")," to find out more about streaming certificates (which are not the same as the authorization certificate in the Mobile Companion app)."),(0,i.mdx)("p",null,"This code snippet assumes basic familiarity with OpenCV for image rendering and interaction."),(0,i.mdx)("h3",{id:"1-instantiate-streaming-client"},"1. Instantiate Streaming Client"),(0,i.mdx)("p",null,"An instance of ",(0,i.mdx)("inlineCode",{parentName:"p"},"StreamingClient")," is created to manage streaming data."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},"streaming_client = aria.StreamingClient()\n")),(0,i.mdx)("h3",{id:"2-configure-the-subscription"},"2. Configure the subscription"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"Subscription is configured to listen to Aria's RGB and SLAM streams. The ",(0,i.mdx)("inlineCode",{parentName:"li"},"subscriber_data_type")," attribute determines the type of data the client subscribes to.")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},"config = streaming_client.subscription_config\nconfig.subscriber_data_type = (\n    aria.StreamingDataType.Rgb | aria.StreamingDataType.Slam\n)\n")),(0,i.mdx)("h3",{id:"3-set-message-queue-size"},"3. Set message queue size"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"The message queue size determines how many recent frames will be retained. A smaller queue size is utilized to process only the most recent data.")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},"config.message_queue_size[aria.StreamingDataType.Rgb] = 1\nconfig.message_queue_size[aria.StreamingDataType.Slam] = 1\n")),(0,i.mdx)("h3",{id:"4-set-streaming-security-options"},"4. Set streaming security options"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"Security options are set to use ephemeral certificates through a ",(0,i.mdx)("inlineCode",{parentName:"li"},"StreamingSecurityOptions")," instance. Go to ",(0,i.mdx)("a",{parentName:"li",href:"/docs/ARK/sdk/concepts/streaming_internals"},"the Streaming Internals page")," for various aspects of streaming security and how certificates are used.")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},"options = aria.StreamingSecurityOptions()\noptions.use_ephemeral_certs = True\nconfig.security_options = options\n")),(0,i.mdx)("h3",{id:"5-create-an-streamingclient-observer-and-attach-it"},"5. Create an StreamingClient observer and attach it"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"An observer class ",(0,i.mdx)("inlineCode",{parentName:"li"},"StreamingClientObserver")," is defined and instantiated. It manages the received image data. The method ",(0,i.mdx)("inlineCode",{parentName:"li"},"on_image_received")," is a callback that allows you to store images with their corresponding camera ID.")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},"class StreamingClientObserver:\n    def __init__(self):\n        self.images = {}\n\n    def on_image_received(self, image: np.array, record: ImageDataRecord):\n        self.images[record.camera_id] = image\n\nobserver = StreamingClientObserver()\nstreaming_client.set_streaming_client_observer(observer)\n")),(0,i.mdx)("h3",{id:"6-start-subscribing-and-listen-to-the-live-stream"},"6. Start subscribing and listen to the live stream"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"The client begins listening for incoming streaming data from the subscribed data types.")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},"streaming_client.subscribe()\n")),(0,i.mdx)("h3",{id:"6-visualize-the-live-stream"},"6. Visualize the live stream"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"RGB and SLAM images are visualized in separate windows using OpenCV. The images are processed and displayed the streaming stops or the application quit. We rotate the image and stack the SLAM images so that they are shown in a single window.")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},"while not quit_keypress():\n    # Render the RGB image\n    if aria.CameraId.Rgb in observer.images:\n        rgb_image = np.rot90(observer.images[aria.CameraId.Rgb], -1)\n        rgb_image = cv2.cvtColor(rgb_image, cv2.COLOR_BGR2RGB)\n        cv2.imshow(rgb_window, rgb_image)\n        del observer.images[aria.CameraId.Rgb]\n\n    # Stack and display the SLAM images\n    if (\n        aria.CameraId.Slam1 in observer.images\n        and aria.CameraId.Slam2 in observer.images\n    ):\n        slam1_image = np.rot90(observer.images[aria.CameraId.Slam1], -1)\n        slam2_image = np.rot90(observer.images[aria.CameraId.Slam2], -1)\n        cv2.imshow(slam_window, np.hstack((slam1_image, slam2_image)))\n        del observer.images[aria.CameraId.Slam1]\n        del observer.images[aria.CameraId.Slam2]\n")),(0,i.mdx)("admonition",{type:"note"},(0,i.mdx)("p",{parentName:"admonition"},"Cameras on Aria glasses are installed sideways. The visualizer rotates the raw image data for a more natural view.")),(0,i.mdx)("h3",{id:"7-unsubscribe-from-the-stream-and-free-resources"},"7. Unsubscribe from the stream and free resources"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"Unsubscribing stops the client from listening to streaming data and cleans up resources.")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},"streaming_client.unsubscribe()\n")))}p.isMDXComponent=!0}}]);