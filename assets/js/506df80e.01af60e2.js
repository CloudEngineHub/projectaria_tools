"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6507],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>s,MDXProvider:()=>p,mdx:()=>h,useMDXComponents:()=>m,withMDXComponents:()=>d});var i=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(){return r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e},r.apply(this,arguments)}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=i.createContext({}),d=function(e){return function(n){var t=m(n.components);return i.createElement(e,r({},n,{components:t}))}},m=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=m(e.components);return i.createElement(s.Provider,{value:n},e.children)},u="mdxType",v={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},f=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=m(t),p=a,u=d["".concat(o,".").concat(p)]||d[p]||v[p]||r;return t?i.createElement(u,l(l({ref:n},s),{},{components:t})):i.createElement(u,l({ref:n},s))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=f;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<r;s++)o[s]=t[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}f.displayName="MDXCreateElement"},70809:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var i=t(87462),a=(t(67294),t(3905));t(79524);const r={sidebar_position:10,title:"Fetch Device Info & Status"},o="Connect Glasses and Fetch Info Using the Client SDK",l={unversionedId:"ARK/sdk/samples/device_connection",id:"ARK/sdk/samples/device_connection",title:"Fetch Device Info & Status",description:"Overview",source:"@site/docs/ARK/sdk/samples/device_connection.mdx",sourceDirName:"ARK/sdk/samples",slug:"/ARK/sdk/samples/device_connection",permalink:"/projectaria_tools/docs/ARK/sdk/samples/device_connection",draft:!1,editUrl:"https://github.com/facebookresearch/projectaria_tools/tree/main/website/docs/ARK/sdk/samples/device_connection.mdx",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10,title:"Fetch Device Info & Status"},sidebar:"tutorialSidebar",previous:{title:"Code Samples",permalink:"/projectaria_tools/docs/ARK/sdk/samples/"},next:{title:"Make a Recording",permalink:"/projectaria_tools/docs/ARK/sdk/samples/device_recording"}},c={},s=[{value:"Overview",id:"overview",level:2},{value:"Run <code>device_connect</code>",id:"run-device_connect",level:2},{value:"Code walkthrough",id:"code-walkthrough",level:2},{value:"1. Set Up",id:"1-set-up",level:3},{value:"2. Create a Device Client",id:"2-create-a-device-client",level:3},{value:"3. Connect to a Device",id:"3-connect-to-a-device",level:3},{value:"2. Fetch device status",id:"2-fetch-device-status",level:3},{value:"3. Retrieve device information",id:"3-retrieve-device-information",level:3},{value:"4. Disconnect",id:"4-disconnect",level:3}],d={toc:s},m="wrapper";function p(e){let{components:n,...t}=e;return(0,a.mdx)(m,(0,i.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"connect-glasses-and-fetch-info-using-the-client-sdk"},"Connect Glasses and Fetch Info Using the Client SDK"),(0,a.mdx)("h2",{id:"overview"},"Overview"),(0,a.mdx)("p",null,"This page shows how to run the code sample ",(0,a.mdx)("inlineCode",{parentName:"p"},"device_connect")," to connect to Project Aria Glasses and fetch info. It also provides a code walkthrough of its capabilities."),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"device_connect enables")," you to validate that your Aria glasses have successfully connected to your computer by fetching:"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},"Device Status information, such as such as battery level, Wi-Fi SSID or Wi-Fi IP address"),(0,a.mdx)("li",{parentName:"ul"},"Device information such as the device serial number or device model")),(0,a.mdx)("h2",{id:"run-device_connect"},"Run ",(0,a.mdx)("inlineCode",{parentName:"h2"},"device_connect")),(0,a.mdx)("p",null,"In Terminal, from the samples directory, run:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-bash"},"python -m device_connect\n")),(0,a.mdx)("p",null,"You should then see:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"[AriaSdk:DeviceControllerImpl][INFO]: Connecting to device <serial_number> using ADB\n[AriaSdk:DeviceClientImpl][INFO]: Connection established with device <serial_number>\nAria Device Status: battery level 100, wifi ssid <xxxxxxxx> , wifi ip <192.168.xx.xx>, mode DeviceMode.Partner\nAria Device Info: model Aria, serial <serial_number>\nAria Device Connected, disconnecting\n")),(0,a.mdx)("h2",{id:"code-walkthrough"},"Code walkthrough"),(0,a.mdx)("h3",{id:"1-set-up"},"1. Set Up"),(0,a.mdx)("ol",null,(0,a.mdx)("li",{parentName:"ol"},"Import the Aria Client SDK from aria.sdk")),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"import aria.sdk as aria\n")),(0,a.mdx)("ol",{start:2},(0,a.mdx)("li",{parentName:"ol"},"Set the log level for the SDK (optional)",(0,a.mdx)("ul",{parentName:"li"},(0,a.mdx)("li",{parentName:"ul"},"By default, it is set to ",(0,a.mdx)("inlineCode",{parentName:"li"},"Info"),", use ",(0,a.mdx)("inlineCode",{parentName:"li"},"Trace")," or ",(0,a.mdx)("inlineCode",{parentName:"li"},"Debug")," for more detailed logs.")))),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"aria.set_log_level(aria.Level.Info)\n")),(0,a.mdx)("h3",{id:"2-create-a-device-client"},"2. Create a Device Client"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"DeviceClient")," is the main SDK entry point. Once created it is used to retrieve a ",(0,a.mdx)("inlineCode",{parentName:"p"},"Device")," instance providing various SDKs features such as recording, streaming or fetching device information and status."),(0,a.mdx)("p",null,"By default, ",(0,a.mdx)("inlineCode",{parentName:"p"},"DeviceClient")," will attempt to connect to Aria glasses over USB. To connect to glasses over Wi-Fi configure you can configure the ",(0,a.mdx)("inlineCode",{parentName:"p"},"DeviceClient")," by creating a ",(0,a.mdx)("inlineCode",{parentName:"p"},"DeviceClientConfig"),", setting ",(0,a.mdx)("inlineCode",{parentName:"p"},"ip_v4_address")," and setting the config."),(0,a.mdx)("admonition",{type:"info"},(0,a.mdx)("p",{parentName:"admonition"},"Get your Aria glasses' IP address from the Mobile Companion App by tapping ",(0,a.mdx)("a",{parentName:"p",href:"/docs/ARK/mobile_companion_app#dashboard"},"Wi-Fi on the Dashboard"),".")),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"device_client = aria.DeviceClient()\n\nclient_config = aria.DeviceClientConfig()\nif args.ip_address:\n    client_config.ip_v4_address = args.ip_address\ndevice_client.set_client_config(client_config)\n")),(0,a.mdx)("h3",{id:"3-connect-to-a-device"},"3. Connect to a Device"),(0,a.mdx)("p",null,"Connect to the Aria glasses and retrieve a ",(0,a.mdx)("inlineCode",{parentName:"p"},"Device")," instance."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"device = device_client.connect()\n")),(0,a.mdx)("h3",{id:"2-fetch-device-status"},"2. Fetch device status"),(0,a.mdx)("p",null,"Use the following commands to:"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},"Obtain the status of the Aria glasses."),(0,a.mdx)("li",{parentName:"ul"},"Print details such as battery level, connected Wi-Fi SSID, Wi-Fi IP address, and device mode")),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'status = device.status\nprint(\n    "Aria Device Status: battery level {0}, wifi ssid {1}, wifi ip {2}, mode {3}".format(\n        status.battery_level,\n        status.wifi_ssid,\n        status.wifi_ip_address,\n        status.device_mode,\n    )\n)\n')),(0,a.mdx)("h3",{id:"3-retrieve-device-information"},"3. Retrieve device information"),(0,a.mdx)("p",null,"Use the following commands to:"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},"Get comprehensive information about the Aria glasses"),(0,a.mdx)("li",{parentName:"ul"},"Display device-specific details like its model, serial number, and manufacturer.")),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'info = device.info\nprint(\n    "Aria Device Info: model {}, serial {}, manufacturer {}".format(\n        info.model, info.serial, info.manufacturer\n    )\n)\n')),(0,a.mdx)("h3",{id:"4-disconnect"},"4. Disconnect"),(0,a.mdx)("p",null,"Once all operations have been completed, make sure you disconnect your glasses to release any held resources."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"device_client.disconnect(device)\n")))}p.isMDXComponent=!0}}]);