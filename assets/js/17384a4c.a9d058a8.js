"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4298],{3905:(e,a,t)=>{t.r(a),t.d(a,{MDXContext:()=>c,MDXProvider:()=>p,mdx:()=>v,useMDXComponents:()=>d,withMDXComponents:()=>u});var r=t(67294);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(){return i=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var t=arguments[a];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},i.apply(this,arguments)}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function s(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var c=r.createContext({}),u=function(e){return function(a){var t=d(a.components);return r.createElement(e,i({},a,{components:t}))}},d=function(e){var a=r.useContext(c),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},p=function(e){var a=d(e.components);return r.createElement(c.Provider,{value:a},e.children)},m="mdxType",b={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},f=r.forwardRef((function(e,a){var t=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=d(t),p=n,m=u["".concat(o,".").concat(p)]||u[p]||b[p]||i;return t?r.createElement(m,l(l({ref:a},c),{},{components:t})):r.createElement(m,l({ref:a},c))}));function v(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var i=t.length,o=new Array(i);o[0]=f;var l={};for(var s in a)hasOwnProperty.call(a,s)&&(l[s]=a[s]);l.originalType=e,l[m]="string"==typeof e?e:n,o[1]=l;for(var c=2;c<i;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},18679:(e,a,t)=>{t.r(a),t.d(a,{default:()=>o});var r=t(67294),n=t(86010);const i={tabItem:"tabItem_Ymn6"};function o(e){let{children:a,hidden:t,className:o}=e;return r.createElement("div",{role:"tabpanel",className:(0,n.default)(i.tabItem,o),hidden:t},a)}},73992:(e,a,t)=>{t.r(a),t.d(a,{default:()=>x});var r=t(87462),n=t(67294),i=t(86010),o=t(72957),l=t(16550),s=t(75238),c=t(33609),u=t(92560);function d(e){return function(e){return n.Children.map(e,(e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:a}=e;return!!a&&"object"==typeof a&&"value"in a}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:a,label:t,attributes:r,default:n}}=e;return{value:a,label:t,attributes:r,default:n}}))}function p(e){const{values:a,children:t}=e;return(0,n.useMemo)((()=>{const e=a??d(t);return function(e){const a=(0,c.l)(e,((e,a)=>e.value===a.value));if(a.length>0)throw new Error(`Docusaurus error: Duplicate values "${a.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[a,t])}function m(e){let{value:a,tabValues:t}=e;return t.some((e=>e.value===a))}function b(e){let{queryString:a=!1,groupId:t}=e;const r=(0,l.k6)(),i=function(e){let{queryString:a=!1,groupId:t}=e;if("string"==typeof a)return a;if(!1===a)return null;if(!0===a&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:a,groupId:t});return[(0,s._X)(i),(0,n.useCallback)((e=>{if(!i)return;const a=new URLSearchParams(r.location.search);a.set(i,e),r.replace({...r.location,search:a.toString()})}),[i,r])]}function f(e){const{defaultValue:a,queryString:t=!1,groupId:r}=e,i=p(e),[o,l]=(0,n.useState)((()=>function(e){let{defaultValue:a,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!m({value:a,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${a}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return a}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:a,tabValues:i}))),[s,c]=b({queryString:t,groupId:r}),[d,f]=function(e){let{groupId:a}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(a),[r,i]=(0,u.Nk)(t);return[r,(0,n.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:r}),v=(()=>{const e=s??d;return m({value:e,tabValues:i})?e:null})();(0,n.useLayoutEffect)((()=>{v&&l(v)}),[v]);return{selectedValue:o,selectValue:(0,n.useCallback)((e=>{if(!m({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),c(e),f(e)}),[c,f,i]),tabValues:i}}var v=t(51048);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function h(e){let{className:a,block:t,selectedValue:l,selectValue:s,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:d}=(0,o.o5)(),p=e=>{const a=e.currentTarget,t=u.indexOf(a),r=c[t].value;r!==l&&(d(a),s(r))},m=e=>{let a=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const t=u.indexOf(e.currentTarget)+1;a=u[t]??u[0];break}case"ArrowLeft":{const t=u.indexOf(e.currentTarget)-1;a=u[t]??u[u.length-1];break}}a?.focus()};return n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.default)("tabs",{"tabs--block":t},a)},c.map((e=>{let{value:a,label:t,attributes:o}=e;return n.createElement("li",(0,r.Z)({role:"tab",tabIndex:l===a?0:-1,"aria-selected":l===a,key:a,ref:e=>u.push(e),onKeyDown:m,onClick:p},o,{className:(0,i.default)("tabs__item",g.tabItem,o?.className,{"tabs__item--active":l===a})}),t??a)})))}function _(e){let{lazy:a,children:t,selectedValue:r}=e;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(a){const e=i.find((e=>e.props.value===r));return e?(0,n.cloneElement)(e,{className:"margin-top--md"}):null}return n.createElement("div",{className:"margin-top--md"},i.map(((e,a)=>(0,n.cloneElement)(e,{key:a,hidden:e.props.value!==r}))))}function y(e){const a=f(e);return n.createElement("div",{className:(0,i.default)("tabs-container",g.tabList)},n.createElement(h,(0,r.Z)({},e,a)),n.createElement(_,(0,r.Z)({},e,a)))}function x(e){const a=(0,v.default)();return n.createElement(y,(0,r.Z)({key:String(a)},e))}},64261:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>u,contentTitle:()=>s,default:()=>b,frontMatter:()=>l,metadata:()=>c,toc:()=>d});var r=t(87462),n=(t(67294),t(3905)),i=t(73992),o=t(18679);const l={sidebar_position:30,title:"Calibration"},s=void 0,c={unversionedId:"data_utilities/core_code_snippets/calibration",id:"data_utilities/core_code_snippets/calibration",title:"Calibration",description:"In this section, we introduce the Python/C++ API to access calibration from Aria VRS files (projectariatools/main/core/calibration).",source:"@site/docs/data_utilities/core_code_snippets/calibration.mdx",sourceDirName:"data_utilities/core_code_snippets",slug:"/data_utilities/core_code_snippets/calibration",permalink:"/projectaria_tools/docs/data_utilities/core_code_snippets/calibration",draft:!1,editUrl:"https://github.com/facebookresearch/projectaria_tools/tree/main/website/docs/data_utilities/core_code_snippets/calibration.mdx",tags:[],version:"current",sidebarPosition:30,frontMatter:{sidebar_position:30,title:"Calibration"},sidebar:"tutorialSidebar",previous:{title:"Image",permalink:"/projectaria_tools/docs/data_utilities/core_code_snippets/image"},next:{title:"MPS",permalink:"/projectaria_tools/docs/data_utilities/core_code_snippets/mps"}},u={},d=[{value:"Accessing device calibration",id:"accessing-device-calibration",level:3},{value:"Accessing 6DoF poses of sensors",id:"accessing-6dof-poses-of-sensors",level:3},{value:"Accessing sensor calibration",id:"accessing-sensor-calibration",level:3},{value:"Accessing ET and Microphone calibration",id:"accessing-et-and-microphone-calibration",level:4}],p={toc:d},m="wrapper";function b(e){let{components:a,...t}=e;return(0,n.mdx)(m,(0,r.Z)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,n.mdx)("p",null,"In this section, we introduce the Python/C++ API to access calibration from Aria VRS files (",(0,n.mdx)("a",{parentName:"p",href:"https://github.com/facebookresearch/projectaria_tools/blob/main/core/calibration"},"projectaria_tools/main/core/calibration"),")."),(0,n.mdx)("h3",{id:"accessing-device-calibration"},"Accessing device calibration"),(0,n.mdx)("p",null,"Device calibration stores:"),(0,n.mdx)("ul",null,(0,n.mdx)("li",{parentName:"ul"},"the device's CAD model, which contains the 6DoF poses of sensors of the device as designed."),(0,n.mdx)("li",{parentName:"ul"},"the calibration of all sensors on a single Aria device. See the ",(0,n.mdx)("a",{parentName:"li",href:"#accessing-sensor-calibration"},"Accessing sensor calibration")," section for details."),(0,n.mdx)("li",{parentName:"ul"},"the device's sub-type (",(0,n.mdx)("inlineCode",{parentName:"li"},"DVT-S")," or ",(0,n.mdx)("inlineCode",{parentName:"li"},"DVT-L")," to indicate small or large)")),(0,n.mdx)(i.default,{groupId:"programming-language",mdxType:"Tabs"},(0,n.mdx)(o.default,{value:"python",label:"Python",mdxType:"TabItem"},(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'from projectaria_tools.core import data_provider, calibration\nfrom projectaria_tools.core.stream_id import StreamId\n\nvrsfile = "example.vrs"\nprovider = data_provider.create_vrs_data_provider(vrsfile)\n\n# returns None if vrs does not have a calibration\ndevice_calib = provider.get_device_calibration()\nprint(device_calib.get_device_subtype())\n'))),(0,n.mdx)(o.default,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-cpp"},'#include <dataprovider/VrsDataProvider.h>\nusing namespace projectaria::tools::data_provider;\nusing namespace projectaria::tools::calibration;\n\nstd::string vrsfile = "example.vrs"\nauto maybeProvider = createVrsDataProvider(vrsFilename);\nXR_CHECK(maybeProvider, "Cannot open file");\nauto&provider = *maybeProvider;\n\n// returns nullopt if vrs does not have a calibration\nauto deviceCalib = provider.getDeviceCalibration();\nstd::cout << deviceCalib..getDeviceSubtype() << std::endl;\n')))),(0,n.mdx)("h3",{id:"accessing-6dof-poses-of-sensors"},"Accessing 6DoF poses of sensors"),(0,n.mdx)("p",null,"All 6DoF poses (a.k.a. extrinsic parameters) are represented as relative to the device frame.\nThe device frame is a specific sensor frame, identified by the sensor's label. Aria device frame is by default ",(0,n.mdx)("inlineCode",{parentName:"p"},"camera-slam-left"),".\nWe also provide the pose of ",(0,n.mdx)("a",{parentName:"p",href:"/docs/data_formats/coordinate_convention/3d_coordinate_frame_convention#the-nominal-central-pupil-frame-cpf"},"the central-pupil-frame")," in the device frame or as relative to a sensor frame."),(0,n.mdx)(i.default,{groupId:"programming-language",mdxType:"Tabs"},(0,n.mdx)(o.default,{value:"python",label:"Python",mdxType:"TabItem"},(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'label = "camera-slam-right"\ntransform_device_sensor = device_calib.get_transform_device_sensor(label)\ntransform_device_cpf = device_calib.get_transform_device_cpf()\ntransform_cpf_sensor = device_calib.get_transform_cpf_sensor(label)\n'))),(0,n.mdx)(o.default,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-cpp"},'std::string label = "camera-slam-right";\nSophus::SE3d T_Device_Sensor = deviceCalib.getT_Device_Sensor(label);\nSophus::SE3d T_Device_Cpf = deviceCalib.getT_Device_Cpf();\nSophus::SE3d T_Cpf_Sensor = deviceCalib.getT_Cpf_Sensor(label);\n')))),(0,n.mdx)("h3",{id:"accessing-sensor-calibration"},"Accessing sensor calibration"),(0,n.mdx)("p",null,"Each sensor on the device ",(0,n.mdx)("em",{parentName:"p"},"may")," have a corresponding stream in the vrs and may have a corresponding calibration.\nHowever, some types of sensors may not have calibration defined for them (e.g. GPS, WPS, bluetooth), and some sensors may not record stream in a specific vrs.\nFor sensor streams where calibration is available, they can be accessed by labels:"),(0,n.mdx)(i.default,{groupId:"programming-language",mdxType:"Tabs"},(0,n.mdx)(o.default,{value:"python",label:"Python",mdxType:"TabItem"},(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},"# returns None if vrs does not have a calibration\ndevice_calib = provider.get_device_calibration()\nsensor_calib = device_calib.get_sensor_calib(label)\n")),(0,n.mdx)("p",null,"More conveniently, you can just do"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'stream_id = StreamId("1201-1")\ncalib = provider.get_sensor_calibration(stream_id)\n')),(0,n.mdx)("p",null,"If you know the calibration type, you can also do"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'# returns None if the calibration label does not exist\ncam_calib = device_calib.get_camera_calib("camera-rgb");\nimu_calib = device_calib.get_imu_calib("imu-left");\n'))),(0,n.mdx)(o.default,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-cpp"},"// returns nullopt if vrs does not have a calibration\nauto deviceCalib = provider.getDeviceCalibration();\nauto sensorCalib = deviceCalib.getSensorCalib(label);\n")),(0,n.mdx)("p",null,"More conveniently, you can just do"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre"},'vrs::StreamId streamId = vrs::StreamId::fromNumericalName("1201-1");\nauto maybeCalib = provider.getSensorCalibration(streamId);\n')),(0,n.mdx)("p",null,"If you know the calibration type, you can also do"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-cpp"},'// returns nullopt if the calibration label does not exist\nauto camCalib = deviceCalib.getCameraCalib("camera-rgb");\nauto imuCalib = deviceCalib.getImuCalib("imu-left");\n')))),(0,n.mdx)("h4",{id:"accessing-et-and-microphone-calibration"},"Accessing ET and Microphone calibration"),(0,n.mdx)("p",null,"Note Aria's ET camera stream and audio are special types:"),(0,n.mdx)("ul",null,(0,n.mdx)("li",{parentName:"ul"},"Aria's ET stream switches the stream for left and right ET together, thus its calibration is a pair of CameraCalibration."),(0,n.mdx)("li",{parentName:"ul"},"Aria's Audio stream has 7 channels, thus its calibration is an array of seven microphone calib.")),(0,n.mdx)(i.default,{groupId:"programming-language",mdxType:"Tabs"},(0,n.mdx)(o.default,{value:"python",label:"Python",mdxType:"TabItem"},(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},"# returns None if the calibration label does not exist\net_calib = device_calib.get_aria_et_camera_calib()\nprint(et_calib[0].get_label())\nmic_calib = device_calib.get_aria_microphone_calib()\nprint(mic_calib[0].get_label())\n"))),(0,n.mdx)(o.default,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-cpp"},"// returns nullopt if the calibration label does not exist\nauto etCalib = *deviceCalib.getAriaEtCalib()\nstd::cout << etCalib[0].getLabel() << std::endl;\nauto micCalib = *deviceCalib.getAriaMicCalib()\nstd::cout << micCalib[0].getLabel() << std::endl;\n")))))}b.isMDXComponent=!0}}]);