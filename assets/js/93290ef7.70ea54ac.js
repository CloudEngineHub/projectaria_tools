"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9336],{3905:(e,t,r)=>{r.r(t),r.d(t,{MDXContext:()=>d,MDXProvider:()=>c,mdx:()=>f,useMDXComponents:()=>m,withMDXComponents:()=>l});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(){return a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a.apply(this,arguments)}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var d=n.createContext({}),l=function(e){return function(t){var r=m(t.components);return n.createElement(e,a({},t,{components:r}))}},m=function(e){var t=n.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},c=function(e){var t=m(e.components);return n.createElement(d.Provider,{value:t},e.children)},_="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},v=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),l=m(r),c=o,_=l["".concat(i,".").concat(c)]||l[c]||u[c]||a;return r?n.createElement(_,p(p({ref:t},d),{},{components:r})):n.createElement(_,p({ref:t},d))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=v;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[_]="string"==typeof e?e:o,i[1]=p;for(var d=2;d<a;d++)i[d]=r[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}v.displayName="MDXCreateElement"},46113:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>p,toc:()=>d});var n=r(87462),o=(r(67294),r(3905));const a={sidebar_position:10,title:"VRS to MP4 export (Python)"},i="Tutorial: how to export a VRS file to MP4",p={unversionedId:"data_utilities/advanced_code_snippets/vrs_to_mp4",id:"data_utilities/advanced_code_snippets/vrs_to_mp4",title:"VRS to MP4 export (Python)",description:"In this example, we show how to:",source:"@site/docs/data_utilities/advanced_code_snippets/vrs_to_mp4.mdx",sourceDirName:"data_utilities/advanced_code_snippets",slug:"/data_utilities/advanced_code_snippets/vrs_to_mp4",permalink:"/projectaria_tools/docs/data_utilities/advanced_code_snippets/vrs_to_mp4",draft:!1,editUrl:"https://github.com/facebookresearch/projectaria_tools/tree/main/website/docs/data_utilities/advanced_code_snippets/vrs_to_mp4.mdx",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10,title:"VRS to MP4 export (Python)"},sidebar:"tutorialSidebar",previous:{title:"Plotting Sensor Data (Python)",permalink:"/projectaria_tools/docs/data_utilities/advanced_code_snippets/plotting_sensor_data"},next:{title:"Image Utilities (Python and C++)",permalink:"/projectaria_tools/docs/data_utilities/advanced_code_snippets/image_utilities"}},s={},d=[{value:"Install dependencies",id:"install-dependencies",level:2},{value:"Usage",id:"usage",level:2},{value:"Script (to copy paste to vrs_to_mp4.py file)",id:"script-to-copy-paste-to-vrs_to_mp4py-file",level:2}],l={toc:d},m="wrapper";function c(e){let{components:t,...r}=e;return(0,o.mdx)(m,(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"tutorial-how-to-export-a-vrs-file-to-mp4"},"Tutorial: how to export a VRS file to MP4"),(0,o.mdx)("p",null,"In this example, we show how to:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"Query RGB images from a VRS file"),(0,o.mdx)("li",{parentName:"ul"},"Export those RGB images to a video",(0,o.mdx)("ul",{parentName:"li"},(0,o.mdx)("li",{parentName:"ul"},"Video export is managed with ",(0,o.mdx)("inlineCode",{parentName:"li"},"moviepy"))))),(0,o.mdx)("h2",{id:"install-dependencies"},"Install dependencies"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-bash"},"pip install projectaria_tools moviepy\n")),(0,o.mdx)("h2",{id:"usage"},"Usage"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-bash"},'python vrs_to_mp4.py --input_vrs "projectaria_tools/data/mps_sample/sample.vrs" --output_video "test.mp4"\n')),(0,o.mdx)("h2",{id:"script-to-copy-paste-to-vrs_to_mp4py-file"},"Script (to copy paste to vrs_to_mp4.py file)"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-python"},'import argparse\nimport numpy as np\n\nfrom moviepy.video.io.VideoFileClip import VideoClip\nfrom projectaria_tools.core import data_provider\nfrom projectaria_tools.core.stream_id import StreamId\nfrom projectaria_tools.core.sensor_data import TimeDomain\n\ndef parse_args():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        "--input_vrs",\n        type=str,\n        required=True,\n        help="path to the VRS file to be converted to a video",\n    )\n    parser.add_argument(\n        "--output_video",\n        type=str,\n        required=True,\n        help="path to the VIDEO file you want to create",\n    )\n    parser.add_argument(\n        "--downsample",\n        type=int,\n        required=False,\n        default=2,\n        help="Downsampling factor on VRS images (Must be >=1)",\n    )\n    return parser.parse_args()\n\nargs = parse_args()\n\n# Setup the VRS file data provider\nprovider = data_provider.create_vrs_data_provider(args.input_vrs)\nif not provider:\n    print(f"input_vrs file: \'{args.input_vrs}\' cannot be read")\n    exit(1)\n\n# Configure a deliver queue to provide only RGB image data stream\ndeliver_option = provider.get_default_deliver_queued_options()\ndeliver_option.deactivate_stream_all()\nrgb_stream_id = StreamId("214-1")\ndeliver_option.activate_stream(rgb_stream_id)\n\n# Create a function that will return the next frame to moviePy VideoClip\n# using the \'make_frame\' functor\nseq = provider.deliver_queued_sensor_data(deliver_option)\niter_data = iter(seq)\ndef make_frame(t):\n    try:\n        obj = next(iter_data)\n    except StopIteration:\n        return None\n    img = obj.image_data_and_record()[0].to_numpy_array()\n    downsampling_factor = args.downsample\n    if downsampling_factor > 1:\n        img = img[::downsampling_factor, ::downsampling_factor]\n    # Rotate image only if desired\n    img = np.rot90(img, -1)\n    return img\n\n# Create a VideoClip using the \'make_frame\' functor\nt_first = provider.get_first_time_ns(rgb_stream_id, TimeDomain.DEVICE_TIME)\nt_last = provider.get_last_time_ns(rgb_stream_id, TimeDomain.DEVICE_TIME)\nduration_in_seconds=(t_last - t_first)/1e9\nvideo_writer_clip = VideoClip(make_frame, duration=duration_in_seconds)\n\n# Configure the VideoWriter and run the process\noutput_video_fps = int(provider.get_nominalRateHz(rgb_stream_id))\nvideo_writer_clip.write_videofile(args.output_video, fps=output_video_fps)\nvideo_writer_clip.close()\n\n')))}c.isMDXComponent=!0}}]);